generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol","extendedWhereUnique"]

}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

//==========================================USER CLUSTER====================================================

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  image         String?
  // account Account? @relation(fields:[accountId], references:[id])
  // accountId String?
  contact Contact? @relation(fields:[contactId], references:[id])
  contactId String?
  order     Order[]
  review    Review[]
  // sessions      Session[]
}

model Contact{
  id              String    @id @default(cuid())
  address String
  zip String?
  phone Int
  user User[]
}

//================================================PRODCUT CLUSTER=====================================================

model Product {
  id                  String   @id @default(cuid())
  name        String
  description String
  image       String
  quantity    Int
  price       Float
  category            Category? @relation(fields: [category_id], references: [id])
  category_id         String?
  supplier            Supplier? @relation(fields: [supplier_id], references: [id])
  supplier_id         String?
  order_Product       Order_Product[]
  review              Review[]
  // discount Discount[]
  
}

model Category {
  id          String    @id @default(cuid())
  name        String
  parentId   String?    
  parent   Category?   @relation("subCategory", fields: [parentId], references: [id])
  children    Category[]   @relation("subCategory")

  Product     Product[]
}

model Supplier {
  id             String @id @default(cuid())
  name  String @unique @default("N/A")
  phone String @unique  @default("N/A")

  product Product[]
}



//==============================================ORDER CLUSTER==================================================

model Order {
  id              String    @id @default(cuid())
  total Float @default(0.0)
  order_time      DateTime  @default(now()) @map(name: "order_time")
  user            User      @relation(fields: [user_id], references: [id])
  user_id         String
  delivery       Delivery     @relation(fields: [delivery_id], references: [id])
  delivery_id    String

    order_product Order_Product[]
}

model Delivery{
  id              String    @id @default(cuid())
  country String
  city  String
  line1 String
  line2 String
  postal_code String
  
  order Order[]
}

model Order_Product{
  id         String   @id @default(cuid())
  quantity    Int     @default(1)
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  order       Order     @relation(fields: [order_id], references: [id])
  order_id    String

}

model Review {
  id         String   @id @default(cuid())
  review     String?
  rating     Int
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
}




//==============================================THE MAYBE LATER CLUSTER==================================================

// model Discount {
//   id             String @id @default(cuid())
//   percentage  Int 
//   start_date DateTime
//   end_date    DateTime
//   note  String?
//   product            Product @relation(fields: [product_id], references: [id])
//   product_id         String
// }


// model Account {
//   id                 String  @id @default(cuid())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user      User[]

//   @@unique([provider, providerAccountId])
//   }

//   model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique@map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
//   }

//   model VerificationToken {
//   id         Int      @id @default(autoincrement())
//   identifier String   @unique
//   token      String   @unique
//   expires    DateTime

//   //@@unique([identifier, token])}
// }



